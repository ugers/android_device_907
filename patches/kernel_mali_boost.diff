diff --git a/kernel/softwinner/907/drivers/gpu/mali/mali/Kbuild b/kernel/softwinner/907/drivers/gpu/mali/mali/Kbuild
index cb56624..d8a958f 100644
--- a/kernel/softwinner/907/drivers/gpu/mali/mali/Kbuild
+++ b/kernel/softwinner/907/drivers/gpu/mali/mali/Kbuild
@@ -127,6 +127,9 @@ DEFINES += -DMALI_OS_MEMORY_KERNEL_BUFFER_SIZE_IN_MB=$(OS_MEMORY_KERNEL_BUFFER_S
 
 MALI_PLATFORM_FILE = platform/$(TARGET_PLATFORM)/mali_platform.c
 
+ifeq ($(MALI400_BOOST),y)
+DEFINES += -DCONFIG_PM
+endif
 
 ifdef CONFIG_PM
 ifdef CONFIG_PM_RUNTIME
diff --git a/kernel/softwinner/907/drivers/gpu/mali/mali/Kconfig b/kernel/softwinner/907/drivers/gpu/mali/mali/Kconfig
index dabb36e..39cec50 100644
--- a/kernel/softwinner/907/drivers/gpu/mali/mali/Kconfig
+++ b/kernel/softwinner/907/drivers/gpu/mali/mali/Kconfig
@@ -28,3 +28,9 @@ config MALI400_GPU_UTILIZATION
 	  This enables gathering and processing of the utilization of Mali GPU.
 	  This data can be used as a basis to change GPU operating frequency.
 
+config MALI400_BOOST
+	bool "Enable Mali GPU boost"
+	depends on MALI400
+	---help---
+	  This enables a GPU frequency boost triggered from userspace via power HAL.
+
diff --git a/kernel/softwinner/907/drivers/gpu/mali/mali/linux/mali_kernel_linux.c b/kernel/softwinner/907/drivers/gpu/mali/mali/linux/mali_kernel_linux.c
index ea1caf3..40d7e2d 100644
--- a/kernel/softwinner/907/drivers/gpu/mali/mali/linux/mali_kernel_linux.c
+++ b/kernel/softwinner/907/drivers/gpu/mali/mali/linux/mali_kernel_linux.c
@@ -75,7 +75,7 @@
 static char mali_dev_name[] = "mali"; /* should be const, but the functions we call requires non-cost */
 
 /* the mali device */
-static struct mali_dev device;
+struct mali_dev device;
 
 
 static int mali_open(struct inode *inode, struct file *filp);
diff --git a/kernel/softwinner/907/drivers/gpu/mali/mali/linux/mali_kernel_pm.c b/kernel/softwinner/907/drivers/gpu/mali/mali/linux/mali_kernel_pm.c
index 2cb23bf..562028c 100644
--- a/kernel/softwinner/907/drivers/gpu/mali/mali/linux/mali_kernel_pm.c
+++ b/kernel/softwinner/907/drivers/gpu/mali/mali/linux/mali_kernel_pm.c
@@ -127,10 +127,40 @@ struct platform_device mali_gpu_device =
 	.dev.release = _mali_release_pm
 };
 
+#ifdef CONFIG_MALI400_BOOST
+static ssize_t boostpulse_write(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	int ret;
+	unsigned long val;
+
+	ret = sscanf(buf, "%ld\n", &val);
+	if (ret < 0)
+		return ret;
+
+	mali_boost();
+
+	return size;
+}
+
+static DEVICE_ATTR(boostpulse, 0200, NULL, boostpulse_write);
+#endif
+
 /** This function is called when the device is probed */
 static int mali_probe(struct platform_device *pdev)
 {
+#ifdef CONFIG_MALI400_BOOST
+	int ret;
+
+	ret = device_create_file(&pdev->dev, &dev_attr_boostpulse);
+	if (ret)
+		MALI_PRINT_ERROR(("%d: device_create_file failed\n", __func__));
+
+	return ret;
+#else
 	return 0;
+#endif
 }
 
 static int mali_remove(struct platform_device *pdev)
@@ -138,6 +168,9 @@ static int mali_remove(struct platform_device *pdev)
 #ifdef CONFIG_PM_RUNTIME
 	pm_runtime_disable(&pdev->dev);
 #endif
+#ifdef CONFIG_MALI400_BOOST
+	device_remove_file(&pdev->dev, &dev_attr_boostpulse);
+#endif
 	return 0;
 }
 
diff --git a/kernel/softwinner/907/drivers/gpu/mali/mali/platform/mali400-pmu/mali_platform.c b/kernel/softwinner/907/drivers/gpu/mali/mali/platform/mali400-pmu/mali_platform.c
index 0b1c023..c537fe6 100644
--- a/kernel/softwinner/907/drivers/gpu/mali/mali/platform/mali400-pmu/mali_platform.c
+++ b/kernel/softwinner/907/drivers/gpu/mali/mali/platform/mali400-pmu/mali_platform.c
@@ -18,18 +18,80 @@
 
 #include <linux/module.h>
 #include <linux/clk.h>
+#include <linux/workqueue.h>
+#include <linux/timer.h>
 #include <mach/irqs.h>
 #include <mach/clock.h>
 #include <plat/sys_config.h>
 
+#ifdef CONFIG_MALI400_BOOST
+#define MALI400_BOOST_RATE	1200000000	/* Hz */
+#define MALI_INIT_RATE		960000000	/* Hz */
+#define MALI_BOOST_DURATION	500		/* msec */
+#endif
 
 int mali_clk_div = 3;
-module_param(mali_clk_div, int, S_IRUSR | S_IWUSR | S_IWGRP | S_IRGRP | S_IROTH);
+module_param(mali_clk_div, int,
+	     S_IRUSR | S_IWUSR | S_IWGRP | S_IRGRP | S_IROTH);
 MODULE_PARM_DESC(mali_clk_div, "Clock divisor for mali");
 
 struct clk *h_ahb_mali, *h_mali_clk, *h_ve_pll;
-int mali_clk_flag=0;
+int mali_clk_flag = 0;
+
+#ifdef CONFIG_MALI400_BOOST
+int mali_boost_rate = MALI400_BOOST_RATE / 1000000;
+module_param(mali_boost_rate, int,
+	     S_IRUSR | S_IWUSR | S_IWGRP | S_IRGRP | S_IROTH);
+MODULE_PARM_DESC(mali_boost_rate, "Mali boost rate for power HAL");
+
+int mali_boost_duration = MALI_BOOST_DURATION;
+module_param(mali_boost_duration, int,
+	     S_IRUSR | S_IWUSR | S_IWGRP | S_IRGRP | S_IROTH);
+MODULE_PARM_DESC(mali_boost_rate, "Mali boost duration for power HAL");
+
+static struct timer_list boost_timer;
+unsigned long mali_init_rate = MALI_INIT_RATE;
+static bool boot = true;
+static bool boost_on = false;
+static DEFINE_MUTEX(boost_mutex);
+
+int mali_boost(void)
+{
+	if (boost_on)
+		return -1;
+
+	mutex_lock(&boost_mutex);
+	h_ve_pll = clk_get(NULL, "ve_pll");
+	if (!h_ve_pll)
+		return -1;
+
+	clk_set_rate(h_ve_pll, mali_boost_rate * 1000000);
+	mali_platform_init();
+	boost_on = true;
+	mutex_unlock(&boost_mutex);
+	mod_timer(&boost_timer, jiffies + msecs_to_jiffies(mali_boost_duration));
 
+	return 0;
+}
+
+static void boost(struct work_struct *boost_sched_work)
+{
+	mutex_lock(&boost_mutex);
+	h_ve_pll = clk_get(NULL, "ve_pll");
+	if (!h_ve_pll)
+		MALI_PRINT(("try to get ve pll clock failed!\n"));
+	clk_set_rate(h_ve_pll, MALI_INIT_RATE);
+	mali_platform_init();
+	boost_on = false;
+	mutex_unlock(&boost_mutex);
+}
+
+static DECLARE_WORK(boost_work, boost);
+static void boost_sched_work(unsigned long data)
+{
+	schedule_work(&boost_work);
+}
+#endif
 
 _mali_osk_errcode_t mali_platform_init(void)
 {
@@ -37,100 +99,106 @@ _mali_osk_errcode_t mali_platform_init(void)
 	int clk_div;
 	int mali_used = 0;
 
-	//get mali ahb clock
+	/* get mali ahb clock */
 	h_ahb_mali = clk_get(NULL, "ahb_mali");
-	if(!h_ahb_mali){
+	if (!h_ahb_mali)
 		MALI_PRINT(("try to get ahb mali clock failed!\n"));
-	}
-	//get mali clk
+
+	/* get mali clk */
 	h_mali_clk = clk_get(NULL, "mali");
-	if(!h_mali_clk){
+	if (!h_mali_clk)
 		MALI_PRINT(("try to get mali clock failed!\n"));
-	}
 
+	/* get pll4 clock */
 	h_ve_pll = clk_get(NULL, "ve_pll");
-	if(!h_ve_pll){
+	if (!h_ve_pll)
 		MALI_PRINT(("try to get ve pll clock failed!\n"));
-	}
 
-	//set mali parent clock
-	if(clk_set_parent(h_mali_clk, h_ve_pll)){
+	/* set mali parent clock */
+	if (clk_set_parent(h_mali_clk, h_ve_pll))
 		MALI_PRINT(("try to set mali clock source failed!\n"));
-	}
 
-	//set mali clock
+	/* set mali clock */
 	rate = clk_get_rate(h_ve_pll);
 
-	if(!script_parser_fetch("mali_para", "mali_used", &mali_used, 1)) {
+	if (!script_parser_fetch("mali_para", "mali_used", &mali_used, 1)) {
 		if (mali_used == 1) {
-			if (!script_parser_fetch("mali_para", "mali_clkdiv", &clk_div, 1)) {
+			if (!script_parser_fetch
+			    ("mali_para", "mali_clkdiv", &clk_div, 1)) {
 				if (clk_div > 0) {
-					pr_info("mali: use config clk_div %d\n", clk_div);
+					MALI_DEBUG_PRINT(3, ("Mali: use config clk_div %d\n", clk_div));
 					mali_clk_div = clk_div;
 				}
 			}
 		}
 	}
 
-	pr_info("mali: clk_div %d\n", mali_clk_div);
+	MALI_DEBUG_PRINT(3, ("Mali: clk_div %d\n", mali_clk_div));
 	rate /= mali_clk_div;
 
-	if(clk_set_rate(h_mali_clk, rate)){
+	if (clk_set_rate(h_mali_clk, rate))
 		MALI_PRINT(("try to set mali clock failed!\n"));
-	}
 
-	if(clk_reset(h_mali_clk,0)){
+	if (clk_reset(h_mali_clk, 0))
 		MALI_PRINT(("try to reset release failed!\n"));
-	}
 
-	MALI_PRINT(("mali clock set completed, clock is  %d Hz\n", rate));
+#ifdef CONFIG_MALI400_BOOST
+	MALI_DEBUG_PRINT(3, ("Mali: clock set completed, clock is %d Hz\n",
+			rate / 1000000));
+#else
+	MALI_PRINT(("clock set completed, clock is %d Hz\n",
+			rate / 1000000));
+#endif
 
-
-	/*enable mali axi/apb clock*/
-	if(mali_clk_flag == 0)
-	{
-		//printk(KERN_WARNING "enable mali clock\n");
-		//MALI_PRINT(("enable mali clock\n"));
+	/* enable mali axi/apb clock */
+	if (mali_clk_flag == 0) {
 		mali_clk_flag = 1;
-	       if(clk_enable(h_ahb_mali))
-	       {
-		     MALI_PRINT(("try to enable mali ahb failed!\n"));
-	       }
-	       if(clk_enable(h_mali_clk))
-	       {
-		       MALI_PRINT(("try to enable mali clock failed!\n"));
-	        }
+		if (clk_enable(h_ahb_mali))
+			MALI_PRINT(("try to enable mali ahb failed!\n"));
+
+		if (clk_enable(h_mali_clk))
+			MALI_PRINT(("try to enable mali clock failed!\n"));
 	}
 
+#ifdef CONFIG_MALI400_BOOST
+	if (boot) {
+		MALI_PRINT(("clk_div %d\n", mali_clk_div));
+		MALI_PRINT(("clock set completed, clock is %d Mhz\n",
+			rate / 1000000));
+		mali_init_rate = (long int)h_ve_pll;
+		setup_timer(&boost_timer, boost_sched_work, 0);
+		boot = false;
+	}
+#endif
 
-    MALI_SUCCESS;
+	MALI_SUCCESS;
 }
 
 _mali_osk_errcode_t mali_platform_deinit(void)
 {
-	/*close mali axi/apb clock*/
-	if(mali_clk_flag == 1)
-	{
-		//MALI_PRINT(("disable mali clock\n"));
+	/* close mali axi/apb clock */
+	if (mali_clk_flag == 1) {
 		mali_clk_flag = 0;
-	       clk_disable(h_mali_clk);
-	       clk_disable(h_ahb_mali);
+		clk_disable(h_mali_clk);
+		clk_disable(h_ahb_mali);
 	}
 
-    MALI_SUCCESS;
+#ifdef CONFIG_MALI400_BOOST
+	del_timer(&boost_timer);
+#endif
+
+	MALI_SUCCESS;
 }
 
 _mali_osk_errcode_t mali_platform_power_mode_change(mali_power_mode power_mode)
 {
-    MALI_SUCCESS;
+	MALI_SUCCESS;
 }
 
 void mali_gpu_utilization_handler(u32 utilization)
 {
 }
 
-void set_mali_parent_power_domain(void* dev)
+void set_mali_parent_power_domain(void *dev)
 {
 }
-
-
diff --git a/kernel/softwinner/907/drivers/gpu/mali/mali/platform/mali_platform.h b/kernel/softwinner/907/drivers/gpu/mali/mali/platform/mali_platform.h
index 8c51a97..3783d98 100644
--- a/kernel/softwinner/907/drivers/gpu/mali/mali/platform/mali_platform.h
+++ b/kernel/softwinner/907/drivers/gpu/mali/mali/platform/mali_platform.h
@@ -74,6 +74,10 @@
  */
 void set_mali_parent_power_domain(void* dev);
 
+#ifdef CONFIG_MALI400_BOOST
+int mali_boost(void);
+#endif
+
 #ifdef __cplusplus
 }
 #endif
